안녕하세요! '기능 설계 에이전트'입니다. 사용자 요구사항(PRD)과 기존 프로젝트 분석 자료를 바탕으로, '반복 일정 기능' 구현을 위한 작업 범위 정리 및 구체적인 질문 리스트를 생성하겠습니다.

---

### 프로젝트 분석 및 작업 범위 정리

**1. 데이터 모델 (`src/types.ts`)**
*   `Event` 및 `EventForm` 타입에 `RepeatInfo`가 이미 존재하여 반복 일정의 기본 정보(유형, 간격, 종료일)를 저장할 구조는 마련되어 있습니다.
*   **핵심 과제:** 단일 반복 일정의 수정/삭제를 처리하기 위한 '예외' 모델이 필요합니다. 현재 구조로는 '특정 날짜의 반복 일정만' 수정/삭제하는 요구사항을 처리할 수 없습니다. 이를 위해 데이터 모델의 변경이 필수적입니다.

**2. API 및 데이터 관리 (`src/hooks/useEventOperations.ts`)**
*   현재 CRUD 로직은 개별 `Event` 객체를 기준으로 동작합니다.
*   **핵심 과제:** 반복 일정 전체를 수정/삭제하거나, 개별 인스턴스만 수정/삭제하는 로직을 백엔드 API와 어떻게 통신할지 정의해야 합니다. `saveEvent`, `deleteEvent` 함수는 이 분기 처리를 위한 수정이 필요합니다.

**3. 폼 관리 (`src/hooks/useEventForm.ts`)**
*   반복 관련 `state`(isRepeating, repeatType 등)는 이미 존재합니다.
*   **핵심 과제:** UI에서 '이번 일정만' vs '모든 일정' 수정/삭제를 선택했을 때, 이를 `useEventOperations`의 `saveEvent`/`deleteEvent` 함수에 전달할 방법이 필요합니다.

**4. 캘린더 뷰 및 유틸리티 (`src/hooks/useCalendarView.ts`, `src/utils/dateUtils.ts`)**
*   현재 로직은 저장된 `events` 배열을 그대로 필터링하여 화면에 표시합니다.
*   **핵심 과제:** 반복 규칙(RepeatInfo)을 가진 '마스터' 이벤트를 기반으로, 현재 뷰(월/주)에 표시되어야 할 '가상'의 반복 이벤트 인스턴스들을 동적으로 생성하는 로직이 필요합니다. 이 로직은 `dateUtils.ts` 또는 새로운 유틸리티 파일에 구현되어 `useCalendarView.ts` 또는 관련 컴포넌트에서 사용될 것입니다.

**5. 일정 겹침 (`src/utils/eventOverlap.ts`)**
*   PRD에 "반복일정은 일정 겹침을 고려하지 않는다"고 명시되어 있어, 새로운 반복 일정을 생성할 때 기존 일정과의 겹침 검사는 생략합니다. 이 부분은 현재 스펙에서 수정할 필요가 없습니다.

---

### 🧐 기술 명세 확정을 위한 질문 리스트

개발을 시작하기 전, 아래 사항들에 대한 명확한 결정이 필요합니다.

#### 1. 데이터 모델 및 API 설계
반복 일정의 저장, 수정, 삭제 방식은 전체 아키텍처에 큰 영향을 미칩니다.

1.  **반복 일정 저장 전략**: 사용자가 '매일 반복' 이벤트를 생성할 때, 서버(데이터베이스)에 어떻게 저장할까요?
    *   **방법 A (마스터 이벤트 저장):** 반복 규칙을 가진 하나의 '마스터' 이벤트만 저장하고, 클라이언트(프론트엔드)가 캘린더 뷰를 렌더링할 때마다 이 규칙을 해석해서 화면에 동적으로 표시합니다.
    *   **방법 B (모든 인스턴스 저장):** 생성 시점에 `endDate`까지의 모든 반복 이벤트를 개별적인 `Event` 객체로 만들어 모두 저장합니다.
    *   (분석) `방법 A`는 수정/삭제가 유연하지만 클라이언트 측 계산이 복잡해집니다. `방법 B`는 읽기는 단순하지만, 반복 일정 전체를 수정/삭제할 때 수많은 데이터를 처리해야 하는 부담이 있습니다. **요구사항인 '전체 수정/삭제'를 고려할 때, 어떤 방법을 선택해야 할까요?**

2.  **단일 인스턴스 수정/삭제 처리**: '해당 일정만 수정' 또는 '해당 일정만 삭제' 시, 이 '예외' 정보를 어떻게 관리할까요? (위 1번 질문에서 `방법 A`를 선택했다고 가정)
    *   **제안 1:** 마스터 `Event` 객체에 `exceptions` 배열 필드를 추가합니다.
        *   `exceptions: [{ originalDate: '2024-11-20', modifiedEventId: 'new-event-id-123' }]` (수정 시)
        *   `exceptions: [{ originalDate: '2024-11-22', isDeleted: true }]` (삭제 시)
    *   **제안 2:** 별도의 `event_exceptions` 테이블/컬렉션을 만들어 관리합니다.
    *   **이러한 예외 처리를 위한 데이터 모델 변경에 동의하시나요? 제안 1이 적절할까요?**

3.  **API 요청 명세**: `useEventOperations.ts`에서 반복 일정 수정/삭제 API를 호출할 때, '단일'과 '전체'를 어떻게 구분하여 요청할까요?
    *   **수정 (`PUT /api/events/:id`):** 요청 Body에 `scope` 필드를 추가하는 것은 어떨까요?
        *   `{ eventData: { ... }, scope: 'single', instanceDate: '2024-11-20' }` (단일 수정)
        *   `{ eventData: { ... }, scope: 'all' }` (전체 수정)
    *   **삭제 (`DELETE /api/events/:id`):** 동일하게 `scope` 필드를 Body에 포함할 수 있습니다.
        *   `{ scope: 'single', instanceDate: '2024-11-20' }` (단일 삭제)
        *   `{ scope: 'all' }` (전체 삭제)
    *   **위와 같은 API 요청/응답 스펙으로 진행해도 될까요?**

#### 2. 프론트엔드 구현

1.  **반복 이벤트 식별**: 사용자가 캘린더에서 클릭한 이벤트가 반복 이벤트의 여러 인스턴스 중 '어떤 날짜의 인스턴스'인지 어떻게 식별할까요?
    *   (제안) 캘린더 렌더링 시 동적으로 생성되는 가상 이벤트 객체에 `instanceDate`와 같은 임시 속성을 부여하여 클릭 핸들러에 전달하는 방식은 어떨까요?
        ```typescript
        // 렌더링 시 생성되는 가상 Event 객체 예시
        const virtualEvent = { ...masterEvent, id: masterEvent.id, instanceDate: '2024-11-20' };
        
2.  **반복 이벤트 생성 로직**: `dateUtils.ts` 또는 신규 파일(`repeatUtils.ts`)에 반복 규칙에 따라 특정 기간(예: 현재 보이는 달)의 이벤트 목록을 생성하는 `expandRepeatingEvents(masterEvent, viewStartDate, viewEndDate)`와 같은 유틸리티 함수를 구현해야 합니다. **이 함수의 위치와 책임 범위에 대해 동의하시나요?**

#### 3. 기능 명세 구체화

1.  **매월/매년 반복 기준일**: PRD에 "31일에 매월을 선택하면 31일에만 생성", "윤년 29일에 매년을 선택하면 29일에만 생성"이라고 명시되어 있습니다. 이 규칙을 다시 한번 확인합니다. 예를 들어, 1월 31일에 생성한 '매월 반복' 일정은 2월, 4월, 6월 등에는 아예 표시되지 않는 것이 맞나요? (이는 일반적인 캘린더 앱의 '마지막 날에 생성' 옵션과는 다릅니다.)

---